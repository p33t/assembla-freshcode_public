Some notes for the presentation...

Summary
-------
Background

Simple Platform Indep. Packaging
Bootstrap
Dependency Injection - Field-Based, Annotations

H2 Database
Wait Cursors
Background Tasks

JGoodies Forms
Suggested Practices
Handy Tools

Background
----------
- Contract in 2010 to start a new desktop application
-- Unfamiliar territory: typically most tech decisions are already made (hastily)
-- Spent a good deal of time sorting out the plumbing
--- Not IP, just tech meshing, coding techniques and good practices
-- Discovered that mocking frameworks use a technique that could be useful
   in production code.  Called 'MethodTriggers'.

- Created a demo app for reference purposes
-- Don't want to have to retrace steps

- Not
-- Rich Client Platform tutorial (Netbeans, Eclipse etc.)
--- Probably useful but not that much fun to learn
-- A style guide
--- Ask questions but be prepared to agree to disagree
-- Idealogical crusade
--- Dodgy practices that if used in controlled manner have high utility
--- EG. Ref<T> ... effectively pass-by-reference
-- An Introduction To Swing
--- Ask questions but be prepared for an abbreviated answer
--- Ask me later for a step in the right direction

- I enjoy hobby projects immensely but have trouble getting them off the ground
-- Hopefully anyone else that suffers from this will benefit


Packaging
---------
- Demo the deployment
-- Build and install new Zip file
-- Open the jar and show the manifest: mainclass and classpath
-- Show excutable bits on run.sh and jar
-- Show the contents of
--- run.sh... only need 2 lines
--- READ_ME.txt... could build up a 'release.properties' file (jenkins props)
-- Put 'space' in folder name and launch from another folder
--- Demo 'features' (Don't forget 'tailing' feature and resize... more handy than status)
--- Note the appearance of log file
- Look at pom.xml and descriptor.xml

Bootstrap
---------
- MainClass, Bootstrap... app.home calculation
- log4j.properties
-- ${app.home}
-- more configuration files go here
- Logging injection

Dependency Injection
--------------------
- field-based (vs. setters, constructors)
-- Need init method
- no-xml... just annotations
- Use cases
-- Simple singleton
-- Simple non-singleton (H2Database)
-- Partially injected 'prototype'
--- Centralized construction in Factory
-- External Objects (Configuration... gets subclassed)
-- Object disposal (Singleton supported natively, but other workarounds)
- Usage: Sort of like extended imports
-- Contrast with static util file style (potentially has state)
- Gotcha: @Lazy(true) to prevent headless exceptions in CI, other uses

H2 Database
-----------
- Cool features
-- Different modes: memory w/wo multi connections, embedded, server
-- Import/export to script w/wo compression, password (source control anyone?)
-- full-text search
-- 1.3 MB
-- Really good doco
- Can use to manage resumable work in a thread gang
- Good Practice: All state goes in db
-- including property table
- H2Database object... expected to have a DAO... obstacle to hacking.
-- 'data' folder calculated like 'log' folder
- JdbcTemplate
-- Probably the minimum ORM / JDBC support to use
-- Can really tailor the DAO

Wait Cursors
------------
- How To
-- Background thread to keep UI responsive (tailing, status bars, close)
-- Transparent panel to capture and keep focus as well as block mouse clicks
--- User actions are NOT buffered
--- Graceful exception handling
- Proxy objects and reflection to make life easier
- Dynamic subclassing and MethodTriggers to make life easier again
-- Meshes well with nullable constructor args, other rules (non-private targets)
-- Use the return value as another input... use reflection safely
-- New and interesting ways to eliminate dupe / clean up code
-- Right-click and menu bindings (return values!)
- In Practice
-- Get out of EDT immediately for non-trivial actions
-- Assume all work is done in background
-- Should never get nested events due to wait cursor blocks
- Status bars anyone?

Background Tasks
----------------
- SwingWorker: Do it this way if possible
- Old school threading: BackgroundWorker
-- Keep thread details private
-- Manage with 'interrupt' and 'isInterrupted'
-- Daemon status

JGoodies
--------
- Form layout a bit like a table
-- I'm not an expert
- row+1 technique

Suggested Practices
-------------------
- Frame 'launch()' method
-- Keep self contained
-- Modal dialogs return a value
- 'host' convention
-- Don't need full 'listener' pattern
-- Don't want cyclic dependencies

Handy Tools
-----------
- Rearranger: Intellij plugin... formatting code can be automated!
- Squirrel SQL Client: Platform independent, connect to anything
- Jenkins (may need to 'cd' due to app.home calculation)
- assembla.com (free 2Gb repos: Git, Subversion)... no more excuses
