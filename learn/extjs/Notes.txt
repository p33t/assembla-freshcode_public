Additional notes about ExtJS...

Deployment (from Getting Started | 3. Deployment)
----------
- Production deployment should use a custom built ExtJS (to shed unecessary classes)
- SDK tool will perform this build AND create a minimised version of app.js

Classes (from Class System)
-------
- v4 introduced a new way to define and instantiate classes for convenience and to facilitate dynamic loading
-- Ext.define() and Ext.create() which require string class names
-- No longer need to use ext-all.js in production
--- Line number in error message is more usable
-- Ext.require() to ensure a class is loaded
- Ext.Class pre-processor provides support for rich, validated class configuration
-- config field
-- applyXxx() validation before setter
-- configs can be nested and peeled open by relevant applyXxx() function
- Static elements (common to all instances)
-- statics field where 'this' has a different meaning (it is the class itself... used for new-ing)
- Can produce error messages with name of origin method using Ext.getDisplayName()
- Webkit enabled browsers will show a stack trace (for Ext.define() classes)
- Mixins for adding functionality (like multi-inheritance)
-- mixins field that has strings of desired mixin classes

Layouts & Containers
--------------------
- Container / Component tree (Panel is most common container)
- Lots of different layout managers (see demos)
- Container.layout = 'named'
- Component.items are managed by Component.layout
- doLayout() called automatically, recursively
- 'suspendLayout = false' for, say, adding multiple screen elements and preventing redundant doLayout() calls
- Component.componentLayout for managing internal (non-'items') components
- Lazy Instantiation
-- Define 'items' using the 'xtype' to prevent upfront instantiation of entire UI
-- Respond to 'render' event if necessary (only fired once)
-- 'panel' is the default 'xtype'
- hide()/show() on each component.  'hideMode' to influence manner
- 'floating: true' components do not participate in layout and are not added to a host component's 'items'
-- rendered to document body when show() is called
-- see also 'draggable', 'shadow', alignTo(), center()
- Opt for subclassing a similar Component (instead of composing a class with Components): Ext.define() & 'extend'
-- 'onRender' can be used to customise but must(ish) call 'this.callParent(arguments)' first (template method pattern)
-- Not to be confused with 'render' event listener which may be muted or postphoned
-- Various other lifecycle methods
--- Component: init, show/hide, enable/disable, resize, position, destroy
--- Container: '' , add/remove, layout
--- Panel: '', collapse/expand, docking
-- Extending Panel is often overkill.  Try to extend Component or Container
-- Need to be aware of layout being used when extending Container
