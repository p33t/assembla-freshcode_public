package biz.freshcode.learn.gwt2.common.client.builder.gxt.toolbar;

import com.sencha.gxt.widget.core.client.toolbar.ToolBar;

/**
 * Generated by BeanBuilderGenerator
 *
 * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar
 */
@SuppressWarnings("UnusedDeclaration")
@biz.freshcode.learn.gwt2.common.client.builder.BeanBuilder(ToolBar.class)
public class ToolBarBuilder extends biz.freshcode.learn.gwt2.common.client.builder.Construct.Parent<ToolBarBuilder> {
    public final ToolBar toolBar;

    public ToolBarBuilder(ToolBar v) {
        toolBar = v;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#ToolBar()
     */
    public ToolBarBuilder() {
        this(new ToolBar());
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#ToolBar(com.sencha.gxt.widget.core.client.toolbar.ToolBar.ToolBarAppearance)
     */
    public ToolBarBuilder(com.sencha.gxt.widget.core.client.toolbar.ToolBar.ToolBarAppearance v0) {
        this(new ToolBar(v0));
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#add(com.google.gwt.user.client.ui.Widget)
     */
    public ToolBarBuilder add(com.google.gwt.user.client.ui.Widget v0) {
        toolBar.add(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#add(com.google.gwt.user.client.ui.IsWidget)
     */
    public ToolBarBuilder add(com.google.gwt.user.client.ui.IsWidget v0) {
        toolBar.add(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#add(com.google.gwt.user.client.ui.IsWidget, com.sencha.gxt.widget.core.client.container.BoxLayoutContainer.BoxLayoutData)
     */
    public ToolBarBuilder add(com.google.gwt.user.client.ui.IsWidget v0, com.sencha.gxt.widget.core.client.container.BoxLayoutContainer.BoxLayoutData v1) {
        toolBar.add(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#addGestureRecognizer(com.sencha.gxt.core.client.gestures.GestureRecognizer)
     */
    public ToolBarBuilder addGestureRecognizer(com.sencha.gxt.core.client.gestures.GestureRecognizer v0) {
        toolBar.addGestureRecognizer(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#addStyleDependentName(java.lang.String)
     */
    public ToolBarBuilder addStyleDependentName(java.lang.String v0) {
        toolBar.addStyleDependentName(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#addStyleName(java.lang.String)
     */
    public ToolBarBuilder addStyleName(java.lang.String v0) {
        toolBar.addStyleName(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#addStyleOnOver(com.google.gwt.dom.client.Element, java.lang.String)
     */
    public ToolBarBuilder addStyleOnOver(com.google.gwt.dom.client.Element v0, java.lang.String v1) {
        toolBar.addStyleOnOver(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setAdjustForFlexRemainder(boolean)
     */
    public ToolBarBuilder adjustForFlexRemainder(boolean v0) {
        toolBar.setAdjustForFlexRemainder(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setAllowTextSelection(boolean)
     */
    public ToolBarBuilder allowTextSelection(boolean v0) {
        toolBar.setAllowTextSelection(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setBorders(boolean)
     */
    public ToolBarBuilder borders(boolean v0) {
        toolBar.setBorders(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setBounds(com.sencha.gxt.core.client.util.Rectangle)
     */
    public ToolBarBuilder bounds(com.sencha.gxt.core.client.util.Rectangle v0) {
        toolBar.setBounds(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setBounds(int, int, int, int)
     */
    public ToolBarBuilder bounds(int v0, int v1, int v2, int v3) {
        toolBar.setBounds(v0, v1, v2, v3);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setContextMenu(com.sencha.gxt.widget.core.client.menu.Menu)
     */
    public ToolBarBuilder contextMenu(com.sencha.gxt.widget.core.client.menu.Menu v0) {
        toolBar.setContextMenu(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setData(java.lang.String, java.lang.Object)
     */
    public ToolBarBuilder data(java.lang.String v0, java.lang.Object v1) {
        toolBar.setData(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setDeferHeight(boolean)
     */
    public ToolBarBuilder deferHeight(boolean v0) {
        toolBar.setDeferHeight(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setEnableOverflow(boolean)
     */
    public ToolBarBuilder enableOverflow(boolean v0) {
        toolBar.setEnableOverflow(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setEnabled(boolean)
     */
    public ToolBarBuilder enabled(boolean v0) {
        toolBar.setEnabled(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setHBoxLayoutAlign(com.sencha.gxt.widget.core.client.container.HBoxLayoutContainer.HBoxLayoutAlign)
     */
    public ToolBarBuilder hBoxLayoutAlign(com.sencha.gxt.widget.core.client.container.HBoxLayoutContainer.HBoxLayoutAlign v0) {
        toolBar.setHBoxLayoutAlign(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setHeight(java.lang.String)
     */
    public ToolBarBuilder height(java.lang.String v0) {
        toolBar.setHeight(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setHeight(int)
     */
    public ToolBarBuilder height(int v0) {
        toolBar.setHeight(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setHideMode(com.sencha.gxt.core.client.Style.HideMode)
     */
    public ToolBarBuilder hideMode(com.sencha.gxt.core.client.Style.HideMode v0) {
        toolBar.setHideMode(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setHorizontalSpacing(int)
     */
    public ToolBarBuilder horizontalSpacing(int v0) {
        toolBar.setHorizontalSpacing(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setId(java.lang.String)
     */
    public ToolBarBuilder id(java.lang.String v0) {
        toolBar.setId(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setItemId(java.lang.String)
     */
    public ToolBarBuilder itemId(java.lang.String v0) {
        toolBar.setItemId(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setLayoutData(java.lang.Object)
     */
    public ToolBarBuilder layoutData(java.lang.Object v0) {
        toolBar.setLayoutData(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setMinButtonWidth(int)
     */
    public ToolBarBuilder minButtonWidth(int v0) {
        toolBar.setMinButtonWidth(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setPack(com.sencha.gxt.widget.core.client.container.BoxLayoutContainer.BoxLayoutPack)
     */
    public ToolBarBuilder pack(com.sencha.gxt.widget.core.client.container.BoxLayoutContainer.BoxLayoutPack v0) {
        toolBar.setPack(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setPadding(com.sencha.gxt.core.client.util.Padding)
     */
    public ToolBarBuilder padding(com.sencha.gxt.core.client.util.Padding v0) {
        toolBar.setPadding(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setPagePosition(int, int)
     */
    public ToolBarBuilder pagePosition(int v0, int v1) {
        toolBar.setPagePosition(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setPixelSize(int, int)
     */
    public ToolBarBuilder pixelSize(int v0, int v1) {
        toolBar.setPixelSize(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setPosition(int, int)
     */
    public ToolBarBuilder position(int v0, int v1) {
        toolBar.setPosition(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setScrollOffset(int)
     */
    public ToolBarBuilder scrollOffset(int v0) {
        toolBar.setScrollOffset(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setShadow(boolean)
     */
    public ToolBarBuilder shadow(boolean v0) {
        toolBar.setShadow(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setShadowPosition(com.sencha.gxt.core.client.dom.Layer.ShadowPosition)
     */
    public ToolBarBuilder shadowPosition(com.sencha.gxt.core.client.dom.Layer.ShadowPosition v0) {
        toolBar.setShadowPosition(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setSize(java.lang.String, java.lang.String)
     */
    public ToolBarBuilder size(java.lang.String v0, java.lang.String v1) {
        toolBar.setSize(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setSpacing(int)
     */
    public ToolBarBuilder spacing(int v0) {
        toolBar.setSpacing(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setStateId(java.lang.String)
     */
    public ToolBarBuilder stateId(java.lang.String v0) {
        toolBar.setStateId(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setStateful(boolean)
     */
    public ToolBarBuilder stateful(boolean v0) {
        toolBar.setStateful(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setStyleDependentName(java.lang.String, boolean)
     */
    public ToolBarBuilder styleDependentName(java.lang.String v0, boolean v1) {
        toolBar.setStyleDependentName(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setStyleName(java.lang.String)
     */
    public ToolBarBuilder styleName(java.lang.String v0) {
        toolBar.setStyleName(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setStyleName(java.lang.String, boolean)
     */
    public ToolBarBuilder styleName(java.lang.String v0, boolean v1) {
        toolBar.setStyleName(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setStylePrimaryName(java.lang.String)
     */
    public ToolBarBuilder stylePrimaryName(java.lang.String v0) {
        toolBar.setStylePrimaryName(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setTabIndex(int)
     */
    public ToolBarBuilder tabIndex(int v0) {
        toolBar.setTabIndex(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setTitle(java.lang.String)
     */
    public ToolBarBuilder title(java.lang.String v0) {
        toolBar.setTitle(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setToolTip(java.lang.String)
     */
    public ToolBarBuilder toolTip(java.lang.String v0) {
        toolBar.setToolTip(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setToolTip(com.google.gwt.safehtml.shared.SafeHtml)
     */
    public ToolBarBuilder toolTip(com.google.gwt.safehtml.shared.SafeHtml v0) {
        toolBar.setToolTip(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setToolTipConfig(com.sencha.gxt.widget.core.client.tips.ToolTipConfig)
     */
    public ToolBarBuilder toolTipConfig(com.sencha.gxt.widget.core.client.tips.ToolTipConfig v0) {
        toolBar.setToolTipConfig(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setVerticalSpacing(int)
     */
    public ToolBarBuilder verticalSpacing(int v0) {
        toolBar.setVerticalSpacing(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setVisible(boolean)
     */
    public ToolBarBuilder visible(boolean v0) {
        toolBar.setVisible(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setWidth(java.lang.String)
     */
    public ToolBarBuilder width(java.lang.String v0) {
        toolBar.setWidth(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.widget.core.client.toolbar.ToolBar#setWidth(int)
     */
    public ToolBarBuilder width(int v0) {
        toolBar.setWidth(v0);
        return this;
    }
}
