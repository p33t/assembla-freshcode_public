package biz.freshcode.learn.gwt.client.builder.gxt.chart;

import com.sencha.gxt.chart.client.chart.Chart;

/**
 * Generated by BeanBuilderGenerator
 *
 * @see com.sencha.gxt.chart.client.chart.Chart
 */
@SuppressWarnings("UnusedDeclaration")
@biz.freshcode.learn.gwt.client.builder.BeanBuilder(Chart.class)
public class ChartBuilder<M> extends biz.freshcode.learn.gwt.client.builder.Construct.Parent<ChartBuilder<M>> {
    public final Chart<M> chart;

    public ChartBuilder(Chart<M> v) {
        chart = v;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#Chart()
     */
    public ChartBuilder() {
        this(new Chart<M>());
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#Chart(int, int)
     */
    public ChartBuilder(int v0, int v1) {
        this(new Chart<M>(v0, v1));
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#addAxis(com.sencha.gxt.chart.client.chart.axis.Axis)
     */
    public ChartBuilder<M> addAxis(com.sencha.gxt.chart.client.chart.axis.Axis<M, ?> v0) {
        chart.addAxis(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#addGradient(com.sencha.gxt.chart.client.draw.Gradient)
     */
    public ChartBuilder<M> addGradient(com.sencha.gxt.chart.client.draw.Gradient v0) {
        chart.addGradient(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#addSeries(com.sencha.gxt.chart.client.chart.series.Series)
     */
    public ChartBuilder<M> addSeries(com.sencha.gxt.chart.client.chart.series.Series<M> v0) {
        chart.addSeries(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#addSprite(com.sencha.gxt.chart.client.draw.sprite.Sprite)
     */
    public ChartBuilder<M> addSprite(com.sencha.gxt.chart.client.draw.sprite.Sprite v0) {
        chart.addSprite(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#addStyleDependentName(java.lang.String)
     */
    public ChartBuilder<M> addStyleDependentName(java.lang.String v0) {
        chart.addStyleDependentName(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#addStyleName(java.lang.String)
     */
    public ChartBuilder<M> addStyleName(java.lang.String v0) {
        chart.addStyleName(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#addStyleOnOver(com.google.gwt.dom.client.Element, java.lang.String)
     */
    public ChartBuilder<M> addStyleOnOver(com.google.gwt.dom.client.Element v0, java.lang.String v1) {
        chart.addStyleOnOver(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setAllowTextSelection(boolean)
     */
    public ChartBuilder<M> allowTextSelection(boolean v0) {
        chart.setAllowTextSelection(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setAnimated(boolean)
     */
    public ChartBuilder<M> animated(boolean v0) {
        chart.setAnimated(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setAnimationDuration(int)
     */
    public ChartBuilder<M> animationDuration(int v0) {
        chart.setAnimationDuration(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setAnimationEasing(com.sencha.gxt.fx.client.easing.EasingFunction)
     */
    public ChartBuilder<M> animationEasing(com.sencha.gxt.fx.client.easing.EasingFunction v0) {
        chart.setAnimationEasing(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setBackground(com.sencha.gxt.chart.client.draw.Color)
     */
    public ChartBuilder<M> background(com.sencha.gxt.chart.client.draw.Color v0) {
        chart.setBackground(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setBorders(boolean)
     */
    public ChartBuilder<M> borders(boolean v0) {
        chart.setBorders(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setBounds(com.sencha.gxt.core.client.util.Rectangle)
     */
    public ChartBuilder<M> bounds(com.sencha.gxt.core.client.util.Rectangle v0) {
        chart.setBounds(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setBounds(int, int, int, int)
     */
    public ChartBuilder<M> bounds(int v0, int v1, int v2, int v3) {
        chart.setBounds(v0, v1, v2, v3);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setContextMenu(com.sencha.gxt.widget.core.client.menu.Menu)
     */
    public ChartBuilder<M> contextMenu(com.sencha.gxt.widget.core.client.menu.Menu v0) {
        chart.setContextMenu(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setData(java.lang.String, java.lang.Object)
     */
    public ChartBuilder<M> data(java.lang.String v0, java.lang.Object v1) {
        chart.setData(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setDefaultInsets(com.sencha.gxt.core.client.util.Region)
     */
    public ChartBuilder<M> defaultInsets(com.sencha.gxt.core.client.util.Region v0) {
        chart.setDefaultInsets(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setDefaultInsets(int)
     */
    public ChartBuilder<M> defaultInsets(int v0) {
        chart.setDefaultInsets(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setDeferHeight(boolean)
     */
    public ChartBuilder<M> deferHeight(boolean v0) {
        chart.setDeferHeight(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setEnabled(boolean)
     */
    public ChartBuilder<M> enabled(boolean v0) {
        chart.setEnabled(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setHeight(java.lang.String)
     */
    public ChartBuilder<M> height(java.lang.String v0) {
        chart.setHeight(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setHeight(int)
     */
    public ChartBuilder<M> height(int v0) {
        chart.setHeight(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setHideMode(com.sencha.gxt.core.client.Style.HideMode)
     */
    public ChartBuilder<M> hideMode(com.sencha.gxt.core.client.Style.HideMode v0) {
        chart.setHideMode(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setId(java.lang.String)
     */
    public ChartBuilder<M> id(java.lang.String v0) {
        chart.setId(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setItemId(java.lang.String)
     */
    public ChartBuilder<M> itemId(java.lang.String v0) {
        chart.setItemId(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setLayoutData(java.lang.Object)
     */
    public ChartBuilder<M> layoutData(java.lang.Object v0) {
        chart.setLayoutData(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setLegend(com.sencha.gxt.chart.client.chart.Legend)
     */
    public ChartBuilder<M> legend(com.sencha.gxt.chart.client.chart.Legend<M> v0) {
        chart.setLegend(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setPagePosition(int, int)
     */
    public ChartBuilder<M> pagePosition(int v0, int v1) {
        chart.setPagePosition(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setPixelSize(int, int)
     */
    public ChartBuilder<M> pixelSize(int v0, int v1) {
        chart.setPixelSize(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setPosition(int, int)
     */
    public ChartBuilder<M> position(int v0, int v1) {
        chart.setPosition(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setShadow(boolean)
     */
    public ChartBuilder<M> shadow(boolean v0) {
        chart.setShadow(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setShadowChart(boolean)
     */
    public ChartBuilder<M> shadowChart(boolean v0) {
        chart.setShadowChart(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setShadowPosition(com.sencha.gxt.core.client.dom.Layer.ShadowPosition)
     */
    public ChartBuilder<M> shadowPosition(com.sencha.gxt.core.client.dom.Layer.ShadowPosition v0) {
        chart.setShadowPosition(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setSize(java.lang.String, java.lang.String)
     */
    public ChartBuilder<M> size(java.lang.String v0, java.lang.String v1) {
        chart.setSize(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setStateId(java.lang.String)
     */
    public ChartBuilder<M> stateId(java.lang.String v0) {
        chart.setStateId(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setStateful(boolean)
     */
    public ChartBuilder<M> stateful(boolean v0) {
        chart.setStateful(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setStore(com.sencha.gxt.data.shared.ListStore)
     */
    public ChartBuilder<M> store(com.sencha.gxt.data.shared.ListStore<M> v0) {
        chart.setStore(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setStyleDependentName(java.lang.String, boolean)
     */
    public ChartBuilder<M> styleDependentName(java.lang.String v0, boolean v1) {
        chart.setStyleDependentName(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setStyleName(java.lang.String)
     */
    public ChartBuilder<M> styleName(java.lang.String v0) {
        chart.setStyleName(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setStyleName(java.lang.String, boolean)
     */
    public ChartBuilder<M> styleName(java.lang.String v0, boolean v1) {
        chart.setStyleName(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setStylePrimaryName(java.lang.String)
     */
    public ChartBuilder<M> stylePrimaryName(java.lang.String v0) {
        chart.setStylePrimaryName(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setSubstore(com.sencha.gxt.data.shared.ListStore)
     */
    public ChartBuilder<M> substore(com.sencha.gxt.data.shared.ListStore<M> v0) {
        chart.setSubstore(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setTabIndex(int)
     */
    public ChartBuilder<M> tabIndex(int v0) {
        chart.setTabIndex(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setTitle(java.lang.String)
     */
    public ChartBuilder<M> title(java.lang.String v0) {
        chart.setTitle(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setToolTip(java.lang.String)
     */
    public ChartBuilder<M> toolTip(java.lang.String v0) {
        chart.setToolTip(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setToolTipConfig(com.sencha.gxt.widget.core.client.tips.ToolTipConfig)
     */
    public ChartBuilder<M> toolTipConfig(com.sencha.gxt.widget.core.client.tips.ToolTipConfig v0) {
        chart.setToolTipConfig(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setViewBox(boolean)
     */
    public ChartBuilder<M> viewBox(boolean v0) {
        chart.setViewBox(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setVisible(boolean)
     */
    public ChartBuilder<M> visible(boolean v0) {
        chart.setVisible(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setWidth(java.lang.String)
     */
    public ChartBuilder<M> width(java.lang.String v0) {
        chart.setWidth(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.Chart#setWidth(int)
     */
    public ChartBuilder<M> width(int v0) {
        chart.setWidth(v0);
        return this;
    }
}
