package biz.freshcode.learn.gwt.common.client.builder.gxt.chart.series;

import com.sencha.gxt.chart.client.chart.series.LineSeries;

/**
 * Generated by BeanBuilderGenerator
 *
 * @see com.sencha.gxt.chart.client.chart.series.LineSeries
 */
@SuppressWarnings("UnusedDeclaration")
@biz.freshcode.learn.gwt.common.client.builder.BeanBuilder(LineSeries.class)
public class LineSeriesBuilder<M> extends biz.freshcode.learn.gwt.common.client.builder.Construct.Parent<LineSeriesBuilder<M>> {
    public final LineSeries<M> lineSeries;

    public LineSeriesBuilder(LineSeries<M> v) {
        lineSeries = v;
    }

    public LineSeriesBuilder() {
        this(new LineSeries<M>());
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setChart(com.sencha.gxt.chart.client.chart.Chart)
     */
    public LineSeriesBuilder<M> chart(com.sencha.gxt.chart.client.chart.Chart<M> v0) {
        lineSeries.setChart(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setFill(com.sencha.gxt.chart.client.draw.Color)
     */
    public LineSeriesBuilder<M> fill(com.sencha.gxt.chart.client.draw.Color v0) {
        lineSeries.setFill(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setFillRenderer(com.sencha.gxt.chart.client.chart.series.SeriesRenderer)
     */
    public LineSeriesBuilder<M> fillRenderer(com.sencha.gxt.chart.client.chart.series.SeriesRenderer<M> v0) {
        lineSeries.setFillRenderer(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setGapless(boolean)
     */
    public LineSeriesBuilder<M> gapless(boolean v0) {
        lineSeries.setGapless(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setHighlighter(com.sencha.gxt.chart.client.chart.series.SeriesHighlighter)
     */
    public LineSeriesBuilder<M> highlighter(com.sencha.gxt.chart.client.chart.series.SeriesHighlighter v0) {
        lineSeries.setHighlighter(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setHighlighting(boolean)
     */
    public LineSeriesBuilder<M> highlighting(boolean v0) {
        lineSeries.setHighlighting(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setLabelConfig(com.sencha.gxt.chart.client.chart.series.SeriesLabelConfig)
     */
    public LineSeriesBuilder<M> labelConfig(com.sencha.gxt.chart.client.chart.series.SeriesLabelConfig<M> v0) {
        lineSeries.setLabelConfig(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setLegendTitle(java.lang.String)
     */
    public LineSeriesBuilder<M> legendTitle(java.lang.String v0) {
        lineSeries.setLegendTitle(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setLineHighlighter(com.sencha.gxt.chart.client.chart.series.SeriesHighlighter)
     */
    public LineSeriesBuilder<M> lineHighlighter(com.sencha.gxt.chart.client.chart.series.SeriesHighlighter v0) {
        lineSeries.setLineHighlighter(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setLineRenderer(com.sencha.gxt.chart.client.chart.series.SeriesRenderer)
     */
    public LineSeriesBuilder<M> lineRenderer(com.sencha.gxt.chart.client.chart.series.SeriesRenderer<M> v0) {
        lineSeries.setLineRenderer(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setMarkerConfig(com.sencha.gxt.chart.client.draw.sprite.Sprite)
     */
    public LineSeriesBuilder<M> markerConfig(com.sencha.gxt.chart.client.draw.sprite.Sprite v0) {
        lineSeries.setMarkerConfig(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setMarkerIndex(double)
     */
    public LineSeriesBuilder<M> markerIndex(double v0) {
        lineSeries.setMarkerIndex(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setRenderer(com.sencha.gxt.chart.client.chart.series.SeriesRenderer)
     */
    public LineSeriesBuilder<M> renderer(com.sencha.gxt.chart.client.chart.series.SeriesRenderer<M> v0) {
        lineSeries.setRenderer(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setSegments(int)
     */
    public LineSeriesBuilder<M> segments(int v0) {
        lineSeries.setSegments(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setSelectionTolerance(double)
     */
    public LineSeriesBuilder<M> selectionTolerance(double v0) {
        lineSeries.setSelectionTolerance(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setShadowRenderer(com.sencha.gxt.chart.client.chart.series.SeriesRenderer)
     */
    public LineSeriesBuilder<M> shadowRenderer(com.sencha.gxt.chart.client.chart.series.SeriesRenderer<M> v0) {
        lineSeries.setShadowRenderer(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setShowMarkers(boolean)
     */
    public LineSeriesBuilder<M> showMarkers(boolean v0) {
        lineSeries.setShowMarkers(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setShownInLegend(boolean)
     */
    public LineSeriesBuilder<M> shownInLegend(boolean v0) {
        lineSeries.setShownInLegend(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setSmooth(boolean)
     */
    public LineSeriesBuilder<M> smooth(boolean v0) {
        lineSeries.setSmooth(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setStroke(com.sencha.gxt.chart.client.draw.Color)
     */
    public LineSeriesBuilder<M> stroke(com.sencha.gxt.chart.client.draw.Color v0) {
        lineSeries.setStroke(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setStrokeWidth(double)
     */
    public LineSeriesBuilder<M> strokeWidth(double v0) {
        lineSeries.setStrokeWidth(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setToolTipConfig(com.sencha.gxt.chart.client.chart.series.SeriesToolTipConfig)
     */
    public LineSeriesBuilder<M> toolTipConfig(com.sencha.gxt.chart.client.chart.series.SeriesToolTipConfig<M> v0) {
        lineSeries.setToolTipConfig(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setXAxisPosition(com.sencha.gxt.chart.client.chart.Chart.Position)
     */
    public LineSeriesBuilder<M> xAxisPosition(com.sencha.gxt.chart.client.chart.Chart.Position v0) {
        lineSeries.setXAxisPosition(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setXField(com.sencha.gxt.core.client.ValueProvider)
     */
    public LineSeriesBuilder<M> xField(com.sencha.gxt.core.client.ValueProvider<? super M, ? extends java.lang.Number> v0) {
        lineSeries.setXField(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setYAxisPosition(com.sencha.gxt.chart.client.chart.Chart.Position)
     */
    public LineSeriesBuilder<M> yAxisPosition(com.sencha.gxt.chart.client.chart.Chart.Position v0) {
        lineSeries.setYAxisPosition(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.chart.series.LineSeries#setYField(com.sencha.gxt.core.client.ValueProvider)
     */
    public LineSeriesBuilder<M> yField(com.sencha.gxt.core.client.ValueProvider<? super M, ? extends java.lang.Number> v0) {
        lineSeries.setYField(v0);
        return this;
    }
}
