package biz.freshcode.learn.gwt.client.builder.gxt.draw.path;

import com.sencha.gxt.chart.client.draw.path.PathSprite;

/**
 * Generated by BeanBuilderGenerator
 *
 * @see com.sencha.gxt.chart.client.draw.path.PathSprite
 */
@SuppressWarnings("UnusedDeclaration")
@biz.freshcode.learn.gwt.client.builder.BeanBuilder(PathSprite.class)
public class PathSpriteBuilder extends biz.freshcode.learn.gwt.client.builder.Construct.Parent<PathSpriteBuilder> {
    public final PathSprite pathSprite;

    public PathSpriteBuilder(PathSprite v) {
        pathSprite = v;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#PathSprite(com.sencha.gxt.chart.client.draw.sprite.RectangleSprite)
     */
    public PathSpriteBuilder(com.sencha.gxt.chart.client.draw.sprite.RectangleSprite v0) {
        this(new PathSprite(v0));
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#PathSprite(com.sencha.gxt.chart.client.draw.sprite.TextSprite)
     */
    public PathSpriteBuilder(com.sencha.gxt.chart.client.draw.sprite.TextSprite v0) {
        this(new PathSprite(v0));
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#PathSprite()
     */
    public PathSpriteBuilder() {
        this(new PathSprite());
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#PathSprite(com.sencha.gxt.chart.client.draw.sprite.CircleSprite)
     */
    public PathSpriteBuilder(com.sencha.gxt.chart.client.draw.sprite.CircleSprite v0) {
        this(new PathSprite(v0));
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#PathSprite(com.sencha.gxt.chart.client.draw.sprite.EllipseSprite)
     */
    public PathSpriteBuilder(com.sencha.gxt.chart.client.draw.sprite.EllipseSprite v0) {
        this(new PathSprite(v0));
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#addCommand(com.sencha.gxt.chart.client.draw.path.PathCommand)
     */
    public PathSpriteBuilder addCommand(com.sencha.gxt.chart.client.draw.path.PathCommand v0) {
        pathSprite.addCommand(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#addCommand(int, com.sencha.gxt.chart.client.draw.path.PathCommand)
     */
    public PathSpriteBuilder addCommand(int v0, com.sencha.gxt.chart.client.draw.path.PathCommand v1) {
        pathSprite.addCommand(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setClipRectangle(com.sencha.gxt.core.client.util.PreciseRectangle)
     */
    public PathSpriteBuilder clipRectangle(com.sencha.gxt.core.client.util.PreciseRectangle v0) {
        pathSprite.setClipRectangle(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setCommand(int, com.sencha.gxt.chart.client.draw.path.PathCommand)
     */
    public PathSpriteBuilder command(int v0, com.sencha.gxt.chart.client.draw.path.PathCommand v1) {
        pathSprite.setCommand(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setCommands(java.util.List)
     */
    public PathSpriteBuilder commands(java.util.List<com.sencha.gxt.chart.client.draw.path.PathCommand> v0) {
        pathSprite.setCommands(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setComponent(com.sencha.gxt.chart.client.draw.DrawComponent)
     */
    public PathSpriteBuilder component(com.sencha.gxt.chart.client.draw.DrawComponent v0) {
        pathSprite.setComponent(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setCursor(java.lang.String)
     */
    public PathSpriteBuilder cursor(java.lang.String v0) {
        pathSprite.setCursor(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setFill(com.sencha.gxt.chart.client.draw.Color)
     */
    public PathSpriteBuilder fill(com.sencha.gxt.chart.client.draw.Color v0) {
        pathSprite.setFill(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setFillOpacity(double)
     */
    public PathSpriteBuilder fillOpacity(double v0) {
        pathSprite.setFillOpacity(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setHidden(boolean)
     */
    public PathSpriteBuilder hidden(boolean v0) {
        pathSprite.setHidden(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setMiterLimit(double)
     */
    public PathSpriteBuilder miterLimit(double v0) {
        pathSprite.setMiterLimit(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setOpacity(double)
     */
    public PathSpriteBuilder opacity(double v0) {
        pathSprite.setOpacity(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setRotation(com.sencha.gxt.chart.client.draw.Rotation)
     */
    public PathSpriteBuilder rotation(com.sencha.gxt.chart.client.draw.Rotation v0) {
        pathSprite.setRotation(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setRotation(double)
     */
    public PathSpriteBuilder rotation(double v0) {
        pathSprite.setRotation(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setRotation(double, double, double)
     */
    public PathSpriteBuilder rotation(double v0, double v1, double v2) {
        pathSprite.setRotation(v0, v1, v2);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setScaling(double)
     */
    public PathSpriteBuilder scaling(double v0) {
        pathSprite.setScaling(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setScaling(com.sencha.gxt.chart.client.draw.Scaling)
     */
    public PathSpriteBuilder scaling(com.sencha.gxt.chart.client.draw.Scaling v0) {
        pathSprite.setScaling(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setScaling(double, double, double, double)
     */
    public PathSpriteBuilder scaling(double v0, double v1, double v2, double v3) {
        pathSprite.setScaling(v0, v1, v2, v3);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setStroke(com.sencha.gxt.chart.client.draw.Color)
     */
    public PathSpriteBuilder stroke(com.sencha.gxt.chart.client.draw.Color v0) {
        pathSprite.setStroke(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setStrokeLineCap(com.google.gwt.canvas.dom.client.Context2d.LineCap)
     */
    public PathSpriteBuilder strokeLineCap(com.google.gwt.canvas.dom.client.Context2d.LineCap v0) {
        pathSprite.setStrokeLineCap(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setStrokeLineJoin(com.google.gwt.canvas.dom.client.Context2d.LineJoin)
     */
    public PathSpriteBuilder strokeLineJoin(com.google.gwt.canvas.dom.client.Context2d.LineJoin v0) {
        pathSprite.setStrokeLineJoin(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setStrokeOpacity(double)
     */
    public PathSpriteBuilder strokeOpacity(double v0) {
        pathSprite.setStrokeOpacity(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setStrokeWidth(double)
     */
    public PathSpriteBuilder strokeWidth(double v0) {
        pathSprite.setStrokeWidth(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setSurface(com.sencha.gxt.chart.client.draw.Surface)
     */
    public PathSpriteBuilder surface(com.sencha.gxt.chart.client.draw.Surface v0) {
        pathSprite.setSurface(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setTranslation(com.sencha.gxt.chart.client.draw.Translation)
     */
    public PathSpriteBuilder translation(com.sencha.gxt.chart.client.draw.Translation v0) {
        pathSprite.setTranslation(v0);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setTranslation(double, double)
     */
    public PathSpriteBuilder translation(double v0, double v1) {
        pathSprite.setTranslation(v0, v1);
        return this;
    }

    /**
     * @see com.sencha.gxt.chart.client.draw.path.PathSprite#setZIndex(int)
     */
    public PathSpriteBuilder zIndex(int v0) {
        pathSprite.setZIndex(v0);
        return this;
    }
}
