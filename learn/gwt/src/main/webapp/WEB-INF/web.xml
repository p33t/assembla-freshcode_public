<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app
        PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>


    <!--
          This Guice listener hijacks all further filters and servlets. Extra
          filters and servlets have to be configured in your
          ServletModule#configureServlets() by calling
          serve(String).with(Class<? extends HttpServlet>) and
          filter(String).through(Class<? extends Filter)
      -->
    <listener>
        <listener-class>biz.freshcode.learn.gwt.server.dispatch.guice.GuiceServletConfig</listener-class>
    </listener>

    <filter>
        <filter-name>guiceFilter</filter-name>
        <filter-class>com.google.inject.servlet.GuiceFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>guiceFilter</filter-name>
        <!-- Escalate usage so XSRF protection works...  <url-pattern>/dispatch/*</url-pattern>-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Servlets
    !!!!!!!!!!MOVED to the GuiceServletConfig so that GWTP XSRF protection works.
    <servlet>
        <servlet-name>greetServlet</servlet-name>
        <servlet-class>biz.freshcode.learn.gwt.server.GreetingServiceImpl</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>requestFactoryServlet</servlet-name>
        <servlet-class>com.google.web.bindery.requestfactory.server.RequestFactoryServlet</servlet-class>
        <init-param>
            <param-name>symbolMapsDirectory</param-name>
            <!- - You'll need to compile with -extras and move the symbolMaps directory
               to this location if you want stack trace deobfuscation to work - ->
            <param-value>WEB-INF/classes/symbolMaps/</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>requestFactoryServlet</servlet-name>
        <url-pattern>/gwtRequest</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>greetServlet</servlet-name>
        <url-pattern>/Mod1/greet</url-pattern>
    </servlet-mapping>
        -->

    <!-- Default page to serve -->
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <!-- Security -->
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>everything</web-resource-name>
            <!-- NOTE: Mangle this to turn off security requirements -->
            <url-pattern>/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <!--
            Setup:
            Tomcat will need the following line added to .../conf/tomcat-users.xml:
              <user username="bruce" password="bruce" roles="superuser"/>
            jetty:run-war config is woven into plugin (see .../src/test/config/jetty-realm.properties)
            GWT Dev mode: Uses same config file as jetty:run-war
            -->
            <role-name>superuser</role-name>
        </auth-constraint>
        <!-- NOTE: key generation is currently manual. (See keytool-maven-plugin in pom.xml)
                    Need to call keytool:genkey
         -->
        <user-data-constraint>
            <!--Doesn't work with code server (?)...<transport-guarantee>CONFIDENTIAL</transport-guarantee>-->
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <login-config>
        <auth-method>BASIC</auth-method>
        <realm-name>Login with bruce x2</realm-name>
    </login-config>

    <security-role>
        <role-name>superuser</role-name>
    </security-role>
</web-app>
