<?xml version="1.0" encoding="UTF-8"?>
<project
        xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!-- POM file generated with GWT webAppCreator -->
    <modelVersion>4.0.0</modelVersion>
    <groupId>biz.freshcode.learn.gwt</groupId>
    <artifactId>learn-gwt</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>Learn GWT</name>

    <repositories>
        <repository>
            <id>sencha-gpl-release</id>
            <name>Open source licensed Sencha artifacts</name>
            <url>https://maven.sencha.com/repo/gpl-release/</url>
        </repository>
    </repositories>

    <properties>
        <!-- Convenience property to set the GWT version -->
        <gwtVersion>2.8.0</gwtVersion>
        <gwtpVersion>1.6</gwtpVersion>
        <!-- NOTE: Might need to change this to 4.0.0 or x.0 for GPL access. -->
        <gxtVersion>4.0.2</gxtVersion>
        <webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <gwt.server>:ssl</gwt.server>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-servlet</artifactId>
            <version>${gwtVersion}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-user</artifactId>
            <version>${gwtVersion}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
            <version>${gwtVersion}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Access to HTML5 features like FileReader.
          ...Actually using FileReader from javascript directly. -->
        <!--<dependency>-->
        <!--<groupId>com.google.gwt</groupId>-->
        <!--<artifactId>gwt-elemental</artifactId>-->
        <!--<version>${gwtVersion}</version>-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>com.google.gwt</groupId>-->
        <!--<artifactId>gwt-elemental</artifactId>-->
        <!--<version>${gwtVersion}</version>-->
        <!--<scope>provided</scope>-->
        <!--<classifier>sources</classifier>-->
        <!--</dependency>-->

        <!-- Facilitates annotation processing to achieve RequestFactory instrumentation -->
        <dependency>
            <groupId>com.google.web.bindery</groupId>
            <artifactId>requestfactory-apt</artifactId>
            <version>${gwtVersion}</version>
            <scope>provided</scope>
        </dependency>
        <!-- GWT 2.5 RC1 bug #7527, moved com/google/gwt/core/client/GWTBridge to com/google/gwt/core/shared/GWTBridge -->
        <dependency>
            <groupId>com.google.web.bindery</groupId>
            <artifactId>requestfactory-server</artifactId>
            <version>${gwtVersion}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.7</version>
            <scope>test</scope>
        </dependency>
        <!-- NOTE: Needed for Request Factory API but no validation implementation needed, hence INFO log message -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.0.0.GA</version>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.0.0.GA</version>
            <classifier>sources</classifier>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.sencha.gxt</groupId>
            <artifactId>gxt</artifactId>
            <version>${gxtVersion}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.sencha.gxt</groupId>
            <artifactId>gxt-chart</artifactId>
            <version>${gxtVersion}</version>
            <scope>provided</scope>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>com.sencha.gxt</groupId>-->
            <!--<artifactId>gxt-theme-triton</artifactId>-->
            <!--<version>${gxtVersion}</version>-->
            <!--<scope>provided</scope>-->
        <!--</dependency>-->
        <!-- Sources are needed (for CI Build).  When using an IDE these may have been automatically downloaded. -->
        <dependency>
            <groupId>com.sencha.gxt</groupId>
            <artifactId>gxt</artifactId>
            <version>${gxtVersion}</version>
            <scope>provided</scope>
            <classifier>sources</classifier>
        </dependency>
        <dependency>
            <groupId>com.sencha.gxt</groupId>
            <artifactId>gxt-chart</artifactId>
            <version>${gxtVersion}</version>
            <scope>provided</scope>
            <classifier>sources</classifier>
        </dependency>

        <!-- Addresses linking error: java.lang.NoClassDefFoundError: org/json/JSONException -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20140107</version>
            <scope>provided</scope>
        </dependency>

        <!--Dispatch framework (command pattern RPC)-->
        <dependency>
            <groupId>com.gwtplatform</groupId>
            <artifactId>gwtp-dispatch-rpc-client</artifactId>
            <version>${gwtpVersion}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.gwtplatform</groupId>
            <artifactId>gwtp-dispatch-rpc-server</artifactId>
            <version>${gwtpVersion}</version>
        </dependency>

        <!-- GWTP alternative to GWT Activity/Places, MVP -->
        <dependency>
            <groupId>com.gwtplatform</groupId>
            <artifactId>gwtp-mvp-client</artifactId>
            <version>${gwtpVersion}</version>
            <scope>provided</scope>
        </dependency>

        <!--  Trying to get it working with guice... but ideally remove this later-->
        <dependency>
            <groupId>com.gwtplatform</groupId>
            <artifactId>gwtp-dispatch-rpc-server-guice</artifactId>
            <version>${gwtpVersion}</version>
        </dependency>
        <dependency>
            <groupId>com.google.inject.extensions</groupId>
            <artifactId>guice-servlet</artifactId>
            <version>3.0</version>
        </dependency>

        <dependency>
            <groupId>biz.freshcode.b-generation</groupId>
            <artifactId>b-generation</artifactId>
            <version>0.5</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.google.gwt.inject</groupId>
            <artifactId>gin</artifactId>
            <version>2.1.2</version>
            <scope>provided</scope>
        </dependency>
        <!-- This is old and clunky...
                <dependency>
                    <groupId>com.googlecode.gwtupload</groupId>
                    <artifactId>gwtupload</artifactId>
                    <version>1.0.1</version>
                </dependency>
        -->
    </dependencies>

    <build>
        <!-- Generate compiled stuff in the folder used for developing mode -->
        <outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

        <plugins>

            <!-- GWT Maven Plugin -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>gwt-maven-plugin</artifactId>
                <version>${gwtVersion}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>test</goal>
                            <goal>i18n</goal>
                            <goal>generateAsync</goal>
                        </goals>
                        <configuration>
                            <!-- Needed to prevent 'OutOfMemoryError: GC overhead limit exceeded' -->
                            <extraJvmArgs>-Xmx2048M</extraJvmArgs>
                            <!-- For inspecting cross compiled javascript -->
                            <!--<style>DETAILED</style>-->
                        </configuration>
                    </execution>
                </executions>
                <!-- Plugin configuration. There are many available options, see
            gwt-maven-plugin documentation at codehaus.org -->
                <configuration>
                    <runTarget>Mod1.html</runTarget>
                    <hostedWebapp>${webappDirectory}</hostedWebapp>
                    <i18nMessagesBundle>biz.freshcode.learn.gwt.client.Messages</i18nMessagesBundle>
                    <!-- Speed tweak -->
                    <!--<draftCompile>true</draftCompile>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <path>/</path>
                    <port>8086</port>
                    <contextFile>${project.basedir}/src/test/resources/context.xml</contextFile>
                    <systemProperties>
                        <appserver.base>${project.build.directory}/appserver-base</appserver.base>
                        <appserver.home>${project.build.directory}/appserver-home</appserver.home>
                        <derby.system.home>${project.build.directory}/appserver-base/logs</derby.system.home>
                        <java.io.tmpdir>${project.build.directory}</java.io.tmpdir>
                    </systemProperties>
                    <useTestClasspath>false</useTestClasspath>
                </configuration>
            </plugin>

            <!-- Copy static web files before executing gwt:run -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>exploded</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <webappDirectory>${webappDirectory}</webappDirectory>
                    <!-- Exclude dev config from packaging -->
                    <!-- NOTE: This could also exclude ../client/** classes and anything provided by container -->
                    <packagingExcludes>WEB-INF/jetty-web.xml</packagingExcludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>keytool-maven-plugin</artifactId>
                <version>1.5</version>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <id>clean</id>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                    <execution>
                        <phase>generate-resources</phase>
                        <id>generateKeyPair</id>
                        <goals>
                            <goal>generateKeyPair</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <keystore>${project.build.directory}/jetty-ssl.keystore</keystore>
                    <dname>cn=localhost</dname>
                    <keypass>jetty-crypto</keypass>
                    <storepass>jetty-crypto</storepass>
                    <alias>jetty-crypto</alias>
                    <keyalg>RSA</keyalg>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>8.1.15.v20140411</version>
                <configuration>
                    <stopKey>59a65811-ad00-468d-ba60-9591bc3c5d97</stopKey>
                    <stopPort>8090</stopPort>
                    <!-- NOTE: Ideally we could specify dev config like this.
                    But there is no equivalent for GWT Dev Mode :(
                    So we put jetty-web.xml in with web.xml and exclude it from the WAR,
                    but it is still available for jetty:run-exploded
                    <webApp>
                        <jettyEnvXml>${basedir}/src/main/webapp/WEB-INF/jetty-web.xml</jettyEnvXml>
                    </webApp>
                    -->
                    <connectors>
                        <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                            <port>8080</port>
                            <maxIdleTime>60000</maxIdleTime>
                            <confidentialPort>8443</confidentialPort>
                        </connector>
                        <connector implementation="org.eclipse.jetty.server.ssl.SslSelectChannelConnector">
                            <port>8443</port>
                            <maxIdleTime>60000</maxIdleTime>
                            <keystore>${project.build.directory}/jetty-ssl.keystore</keystore>
                            <password>jetty-crypto</password>
                            <keyPassword>jetty-crypto</keyPassword>
                        </connector>
                    </connectors>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
